==============================================================================
DOCGEN                                                           *docgen.nvim*

Generate documentation from lua files with LuaCATS annotations + more.

docgen.run({config})                                       *docgen.nvim.run()*
    Parameters: ~
      • {config}  (`docgen.Config`)

==============================================================================
RENDERER                                                     *docgen.renderer*

                                            *docgen.renderer.render_classes()*
renderer.render_classes({classes}, {all_classes})
    Parameters: ~
      • {classes}      (`table<string, docgen.parser.class>`)
      • {all_classes}  (`table<string, docgen.parser.class>`)

    Return: ~
        (`string`)

                                               *docgen.renderer.render_funs()*
renderer.render_funs({funs}, {classes}, {section}, {config})
    Parameters: ~
      • {funs}     (`docgen.parser.fun[]`)
      • {classes}  (`table<string, docgen.parser.class>`)
      • {section}  (`docgen.section`)
      • {config}   (`docgen.FunConfig?`)

    Return: ~
        (`string`)

                                           *docgen.renderer.render_markdown()*
renderer.render_markdown({markdown}, {start_indent}, {indent})
    Parameters: ~
      • {markdown}      (`string`)
      • {start_indent}  (`integer`) indentation amount for the first line
      • {indent}        (`integer`) indentation amount for subsequent lines

    Return: ~
        (`string`)

renderer.render_briefs({briefs})             *docgen.renderer.render_briefs()*
    Parameters: ~
      • {briefs}  (`string[]`)

    Return: ~
        (`string`)

                                            *docgen.renderer.render_section()*
renderer.render_section({section}, {briefs}, {funs}, {classes}, {all_classes})
    Parameters: ~
      • {section}      (`docgen.section`)
      • {briefs}       (`string[]`)
      • {funs}         (`docgen.parser.fun[]`)
      • {classes}      (`table<string, docgen.parser.class>`)
      • {all_classes}  (`table<string, docgen.parser.class>`)

    Return: ~
        (`string`)

                                           *docgen.renderer.append_modeline()*
renderer.append_modeline({doc_lines})
    Parameters: ~
      • {doc_lines}  (`string[]`)

 vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
