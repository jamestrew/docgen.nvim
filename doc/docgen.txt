==============================================================================
DOCGEN                                                                  docgen


*docgen.Config*

    Fields: ~
      • {name}          (`string`) plugin name, will be used to generate
                        filename, eg `docgen` -> `docgen.txt`
      • {files}         (`string[]`) file paths to generate docs from in
                        order
      • {section_fmt}?  (`fun(filename: string): string`) function to
                        generate section titles from filenames if not
                        provided, |section_title| will be used
      • {fn_config}?    (`docgen.FunConfig`)

*docgen.FunConfig*

    Fields: ~
      • {fn_xform}?  (`fun(fn: docgen.parser.fun)`)

*docgen.section*

    Fields: ~
      • {title}      (`string`)
      • {tag}        (`string`)
      • {fn_prefix}  (`string`)




docgen.section_title({filename}, {config})            *docgen.section_title()*
    Generate a section title from the filename by joining the useful module
    name using underscores and uppercasing everything.

    eg:
    • './lua/telescope/init.lua' -> 'TELESCOPE'
    • './lua/telescope/actions/init.lua' -> 'ACTIONS'
    • './lua/telescope/actions/set.lua' -> 'ACTIONS_SET'

    Parameters: ~
      • {filename}  (`string`)
      • {config}    (`table`)

    Return: ~
        (`string`)

docgen.run({config})                                            *docgen.run()*
    Parameters: ~
      • {config}  (`table`)

==============================================================================
PARSER                                                           docgen.parser


*docgen.parser.State*

    Fields: ~
      • {doc_lines}?             (`string[]`)
      • {cur_obj}?               (`docgen.parser.obj`)
      • {last_doc_item}?         (`docgen.parser.param|docgen.parser.return|docgen.parser.note`)
      • {last_doc_item_indent}?  (`integer`)

*docgen.parser.alias*

    Fields: ~
      • {kind}   (`'alias'`)
      • {type}   (`string[]`)
      • {desc}?  (`string`)

*docgen.parser.brief*

    Fields: ~
      • {kind}   (`'brief'`)
      • {desc}?  (`string`)

*docgen.parser.class*

    Fields: ~
      • {kind}        (`'class'`)
      • {parent}?     (`string`)
      • {name}        (`string`)
      • {desc}        (`string`)
      • {nodoc}?      (`true`)
      • {inlinedoc}?  (`true`)
      • {access}?     (`'private'|'package'|'protected'`)
      • {fields}      (`docgen.parser.field[]`)
      • {notes}?      (`string[]`)

*docgen.parser.field*

    Fields: ~
      • {name}     (`string`)
      • {type}     (`string`)
      • {desc}     (`string`)
      • {access}?  (`'private'|'package'|'protected'`)

*docgen.parser.fun*

    Fields: ~
      • {name}         (`string`)
      • {params}       (`docgen.parser.param[]`)
      • {returns}      (`docgen.parser.return[]`)
      • {desc}         (`string`)
      • {access}?      (`'private'|'package'|'protected'`)
      • {class}?       (`string`)
      • {module}?      (`string`)
      • {modvar}?      (`string`)
      • {classvar}?    (`string`)
      • {deprecated}?  (`true`)
      • {since}?       (`string`) -- need?
      • {attrs}?       (`string[]`) -- need?
      • {nodoc}?       (`true`)
      • {generics}?    (`table<string,string>`)
      • {table}?       (`true`)
      • {notes}?       (`docgen.parser.note[]`)
      • {see}?         (`docgen.parser.note[]`)

*docgen.parser.note*

    Fields: ~
      • {desc}?  (`string`)

*docgen.parser.param*

    Fields: ~
      • {name}   (`string`)
      • {type}   (`string`)
      • {desc}?  (`string`)

*docgen.parser.return*

    Fields: ~
      • {name}   (`string`)
      • {type}   (`string`)
      • {desc}?  (`string`)




parser.parse_str({str}, {filename})                *docgen.parser.parse_str()*
    comment

    Parameters: ~
      • {str}       (`string`) input string
      • {filename}  (`string`)

    Return (multiple): ~
        (`table<string, docgen.parser.class>`)
        (`docgen.parser.fun[]`) See |docgen.parser.fun|
        (`string[]`)
        
        (`docgen.parser.alias|docgen.parser.brief|docgen.parser.class|docgen.parser.fun[]`)

parser.parse({filename})                               *docgen.parser.parse()*
    Parameters: ~
      • {filename}  (`string`)

==============================================================================
RENDERER                                                       docgen.renderer


renderer.render_classes({classes})          *docgen.renderer.render_classes()*
    Parameters: ~
      • {classes}  (`table<string, docgen.parser.class>`)

    Return: ~
        (`string`)

                                               *docgen.renderer.render_funs()*
renderer.render_funs({funs}, {classes}, {section}, {config})
    Parameters: ~
      • {funs}     (`docgen.parser.fun[]`)
      • {classes}  (`table<string, docgen.parser.class>`)
      • {section}  (`docgen.section`)
      • {config}   (`docgen.FunConfig?`)

    Return: ~
        (`string`)

                                           *docgen.renderer.render_markdown()*
renderer.render_markdown({markdown}, {start_indent}, {indent})
    Parameters: ~
      • {markdown}      (`string`)
      • {start_indent}  (`integer`) indentation amount for the first line
      • {indent}        (`integer`) indentation amount for subsequent lines

    Return: ~
        (`string`)

renderer.render_briefs({briefs})             *docgen.renderer.render_briefs()*
    Parameters: ~
      • {briefs}  (`string[]`)

    Return: ~
        (`string`)

                                            *docgen.renderer.render_section()*
renderer.render_section({section}, {briefs}, {funs}, {classes}, {config})
    Parameters: ~
      • {section}  (`docgen.section`)
      • {briefs}   (`string[]`)
      • {funs}     (`docgen.parser.fun[]`)
      • {classes}  (`table<string, docgen.parser.class>`)
      • {config}   (`docgen.Config`)

    Return: ~
        (`string`)

                                           *docgen.renderer.append_modeline()*
renderer.append_modeline({doc_lines})
    Parameters: ~
      • {doc_lines}  (`string[]`)

 vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
