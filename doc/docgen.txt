==============================================================================
DOCGEN                                                           *docgen.nvim*

Generate documentation from lua files with LuaCATS annotations + more.

*docgen.FileSection*

    Fields: ~
      • {[1]}            (`string`) filepath from which to generate the
                         section from
      • {title}          (`string?`) title of the section

                         if omitted, generated from the filename eg:
                         • './lua/docgen/init.lua' -> 'DOCGEN'
                         • './lua/docgen/grammar/init.lua' -> 'GRAMMAR'
                         • './lua/docgen/grammar/luacats.lua' ->
                           'GRAMMAR_LUACATS'

      • {tag}            (`string?`) help tag of the section WITHOUT the
                         asterisks

                         if omitted, generated from the filename eg:
                         • './lua/docgen/init.lua' -> 'docgen'
                         • './lua/docgen/grammar/init.lua' -> 'grammar'
                         • './lua/docgen/grammar/luacats.lua' ->
                           'grammar.luacats'

      • {fn_prefix}      (`string?`) module prefix for functions

                         if omitted, generated from the filename same as
                         `section_title` but in lowercase

      • {fn_tag_prefix}  (`string?`) tag prefix for functions, if omitted,
                         uses section tag as prefix


docgen.run({config})                                       *docgen.nvim.run()*
    Parameters: ~
      • {config}  (`table`) A table with the following fields:
                  • {name} (`string`) plugin name, will be used to generate
                    filename, eg `docgen` -> `docgen.txt`
                  • {files} (`(string|docgen.FileSection)[]`) file
                    paths/config to generate docs from in order


==============================================================================
RENDERER                                                     *docgen.renderer*

                                            *docgen.renderer.render_classes()*
renderer.render_classes({classes}, {all_classes})
    Parameters: ~
      • {classes}      (`table<string, docgen.parser.class>`)
      • {all_classes}  (`table<string, docgen.parser.class>`)

    Return: ~
        (`string`)

                                               *docgen.renderer.render_funs()*
renderer.render_funs({funs}, {classes}, {section}, {config})
    Parameters: ~
      • {funs}     (`docgen.parser.fun[]`)
      • {classes}  (`table<string, docgen.parser.class>`)
      • {section}  (`docgen.section`)
      • {config}   (`docgen.FunConfig?`)

    Return: ~
        (`string`)

                                                            *MDRenderer:new()*
MDRenderer:new({md}, {start_indent}, {next_indent}, {list_depth}, {list_marker_size})
    Parameters: ~
      • {md}                (`docgen.MDNode[]`)
      • {start_indent}      (`integer`)
      • {next_indent}       (`integer`)
      • {list_depth}        (`integer?`)
      • {list_marker_size}  (`integer?`)

MDRenderer:render()                                      *MDRenderer:render()*
renderer.render_briefs({briefs})             *docgen.renderer.render_briefs()*
    Parameters: ~
      • {briefs}  (`string[]`)

    Return: ~
        (`string`)

                                            *docgen.renderer.render_section()*
renderer.render_section({section}, {briefs}, {funs}, {classes}, {all_classes})
    Parameters: ~
      • {section}      (`docgen.section`)
      • {briefs}       (`string[]`)
      • {funs}         (`docgen.parser.fun[]`)
      • {classes}      (`table<string, docgen.parser.class>`)
      • {all_classes}  (`table<string, docgen.parser.class>`)

    Return: ~
        (`string`)

                                           *docgen.renderer.append_modeline()*
renderer.append_modeline({doc_lines})
    Parameters: ~
      • {doc_lines}  (`string[]`)


 vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
