==============================================================================
LUA                                                               *docgen.lua*

Generate documentation from lua files with LuaCATS annotations + more.

*docgen.FileSection*

    Fields: ~
      • {path}           (`string`) filepath from which to generate the
                         section from
      • {section_title}  (`string?`) title of the section, if omitted,
                         generated from the filename
      • {section_tag}    (`string?`) help tag of the section, if omitted,
                         generated from the filename

*docgen.FunConfig*

    Fields: ~
      • {fn_xform}?  (`fun(fn: docgen.parser.fun)`)

*docgen.section*

    Fields: ~
      • {title}      (`string`)
      • {tag}        (`string`)
      • {fn_prefix}  (`string`)


lua.section_title({filename})                     *docgen.lua.section_title()*
    Generate a section title from the filename by joining the useful module
    name using underscores and uppercasing everything.

    eg:
    • './lua/telescope/init.lua' -> 'TELESCOPE'
    • './lua/telescope/actions/init.lua' -> 'ACTIONS'
    • './lua/telescope/actions/set.lua' -> 'ACTIONS_SET'

    Parameters: ~
      • {filename}  (`string`)

    Return: ~
        (`string`)

lua.M.section_tag()                               *docgen.lua.M.section_tag()*
lua.run({config})                                           *docgen.lua.run()*
    Parameters: ~
      • {config}  (`table`) A table with the following fields:
                  • {name} (`string`) plugin name, will be used to generate
                    filename, eg `docgen` -> `docgen.txt`
                  • {files} (`string[]`) file paths to generate docs from in
                    order
                  • {section_title}? (`fun(filename: string): string`)
                    function to generate section titles from filenames if not
                    provided, |section_title| will be used
                  • {section_tag}? (`fun(filename: string): string`) function
                    to generate section tags from filenames
                  • {fn_config}? (`docgen.FunConfig`)

==============================================================================
RENDERER                                                     *docgen.renderer*

                                            *docgen.renderer.render_classes()*
renderer.render_classes({classes}, {all_classes})
    Parameters: ~
      • {classes}      (`table<string, docgen.parser.class>`)
      • {all_classes}  (`table<string, docgen.parser.class>`)

    Return: ~
        (`string`)

                                               *docgen.renderer.render_funs()*
renderer.render_funs({funs}, {classes}, {section}, {config})
    Parameters: ~
      • {funs}     (`docgen.parser.fun[]`)
      • {classes}  (`table<string, docgen.parser.class>`)
      • {section}  (`docgen.section`)
      • {config}   (`docgen.FunConfig?`)

    Return: ~
        (`string`)

                                           *docgen.renderer.render_markdown()*
renderer.render_markdown({markdown}, {start_indent}, {indent})
    Parameters: ~
      • {markdown}      (`string`)
      • {start_indent}  (`integer`) indentation amount for the first line
      • {indent}        (`integer`) indentation amount for subsequent lines

    Return: ~
        (`string`)

renderer.render_briefs({briefs})             *docgen.renderer.render_briefs()*
    Parameters: ~
      • {briefs}  (`string[]`)

    Return: ~
        (`string`)

                                            *docgen.renderer.render_section()*
renderer.render_section({section}, {briefs}, {funs}, {classes}, {all_classes}, {config})
    Parameters: ~
      • {section}      (`docgen.section`)
      • {briefs}       (`string[]`)
      • {funs}         (`docgen.parser.fun[]`)
      • {classes}      (`table<string, docgen.parser.class>`)
      • {all_classes}  (`table<string, docgen.parser.class>`)
      • {config}       (`docgen.Config`)

    Return: ~
        (`string`)

                                           *docgen.renderer.append_modeline()*
renderer.append_modeline({doc_lines})
    Parameters: ~
      • {doc_lines}  (`string[]`)

 vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
